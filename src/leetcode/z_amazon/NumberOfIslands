package leetcode.z_amazon;

class NumberOfIslands {
    public int numIsLands(char[][] grid) {
        if (grid.length == 0 || grid[0].length == 0) return 0;
        int row = grid.length;
        int col = grid[0].length;

        int count = 0;
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == '1') {
                    ++count;
                    neighboor(grid, i, j, row, col);
                }
            }
        }
        return count;
    }

    private void neighboor(char[][] grid, int x, int y, int row, int col) {
        if (x < 0 || y < 0 || x >= row || y >= col || grid[x][y] == '0') return;
        grid[x][y] = '0';
        neighboor(grid, x + 1, y, row, col);
        neighboor(grid, x - 1, y, row, col);
        neighboor(grid, x, y + 1, row, col);
        neighboor(grid, x, y - 1, row, col);
    }


    // union find
    int[][] direc = {{1, 0},{-1, 0},{0, 1}, {0, -1}};
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;
        UnionFind uf = new UnionFind(grid);
        int row = grid.length;
        int col = grid[0].length;
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if (grid[i][j] == '1') {
                    for(int[] move : direc) {
                        int x = i + move[0];
                        int y = j + move[1];
                        if (x >= 0 && x < row && y >= 0 && y < col && grid[x][y] == '1') {
                            int idx1 = i * col + j;
                            int idx2 = x * col + y;
                            uf.union(idx1, idx2);
                        }
                    }
                }
            }
        }
        return uf.count;
    }

    class UnionFind {
        int count;
        int[] father;
        UnionFind(char[][] grid) {
            int row = grid.length;
            int col = grid[0].length;

            father = new int[row * col];
            for(int i = 0; i < row; i++) {
                for(int j = 0; j < col; j++) {
                    if (grid[i][j] == '1') {
                        int idx = i * col + j;
                        father[idx] = idx;
                        count++;
                    }
                }
            }
        }
        private void union(int point1, int point2) {
            int pointOneFather = find(point1);
            int pointTwoFather = find(point2);
            if (pointOneFather != pointTwoFather) {
                father[pointOneFather] = pointTwoFather;
                count--;
            }
        }
        private int find(int point) {
            if (father[point] == point) {
                return point;
            }
            father[point] = find(father[point]);
            return father[point];
        }
    }
}